/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import {HttpClient, HttpContext} from '@angular/common/http';
import {Injectable} from '@angular/core';
import {Observable} from 'rxjs';
import {map} from 'rxjs/operators';

import {BaseService} from '../base-service';
import {ApiConfiguration} from '../api-configuration';
import {StrictHttpResponse} from '../strict-http-response';

import {activateAccount, ActivateAccount$Params} from '../fn/authentication/activate-account';
import {AuthResponse} from '../models/auth-response';
import {registerUser, RegisterUser$Params} from '../fn/authentication/register-user';
import {verifyUser, VerifyUser$Params} from '../fn/authentication/verify-user';

@Injectable({providedIn: 'root'})
export class AuthenticationService extends BaseService {
    /** Path part for operation `verifyUser()` */
    static readonly VerifyUserPath = '/auth/verify';
    /** Path part for operation `registerUser()` */
    static readonly RegisterUserPath = '/auth/register';
    /** Path part for operation `activateAccount()` */
    static readonly ActivateAccountPath = '/auth/activate-account';

    constructor(config: ApiConfiguration, http: HttpClient) {
        super(config, http);
    }

    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `verifyUser()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    verifyUser$Response(params: VerifyUser$Params, context?: HttpContext): Observable<StrictHttpResponse<AuthResponse>> {
        return verifyUser(this.http, this.rootUrl, params, context);
    }

    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `verifyUser$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    verifyUser(params: VerifyUser$Params, context?: HttpContext): Observable<AuthResponse> {
        return this.verifyUser$Response(params, context).pipe(
            map((r: StrictHttpResponse<AuthResponse>): AuthResponse => r.body)
        );
    }

    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `registerUser()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    registerUser$Response(params: RegisterUser$Params, context?: HttpContext): Observable<StrictHttpResponse<{}>> {
        return registerUser(this.http, this.rootUrl, params, context);
    }

    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `registerUser$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    registerUser(params: RegisterUser$Params, context?: HttpContext): Observable<{}> {
        return this.registerUser$Response(params, context).pipe(
            map((r: StrictHttpResponse<{}>): {} => r.body)
        );
    }

    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `activateAccount()` instead.
     *
     * This method doesn't expect any request body.
     */
    activateAccount$Response(params: ActivateAccount$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
        return activateAccount(this.http, this.rootUrl, params, context);
    }

    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `activateAccount$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    activateAccount(params: ActivateAccount$Params, context?: HttpContext): Observable<void> {
        return this.activateAccount$Response(params, context).pipe(
            map((r: StrictHttpResponse<void>): void => r.body)
        );
    }

}
